import * as funcs from "/custom_scripts/functions/my_functions.script";
import * as c from "/custom_scripts/functions/constants.script";

var script_to_kill = "/custom_scripts/early-hack-template.script";
var script_to_run = "/custom_scripts/mid-hack-template.script";
var scripts = [script_to_run,
    "/custom_scripts/functions/my_functions.script",
    "/custom_scripts/functions/constants.script"
];

// Get the target server to hack against.
var target = await funcs.get_most_profit_server();

// Calculate how many threads we can afford to run on home 
if (scriptRunning(script_to_kill, "home") == true) {
    scriptKill(script_to_kill, "home");
}
if (scriptRunning(script_to_run, "home") == true) {
    scriptKill(script_to_run, "home");
}
print("Script killed.");
var sRAM = getScriptRam(script_to_run);
var res = getServerRam("home");
var totalRam = res[0];
var ramUsed = res[1];
var availRam = totalRam - ramUsed;
var threads = availRam / sRAM;

exec(script_to_run, "home", Math.floor(threads) - 5, target);
print("Script executed.");

// Get list of servers we can access and run the script on.
var servList = await funcs.get_accessible_servers();
print("Server list retrieved.");

// Break open servers and run script.
for (var i = 0; i < servList.length; ++i) {
    var serv = servList[i];
    if (scriptRunning(script_to_kill, serv) == true) {
        scriptKill(script_to_kill, serv);
        print("Script killed.");
    }
    if (scriptRunning(script_to_run, serv) == true) {
        scriptKill(script_to_run, serv);
        print("Script killed.");
    }
    var info = funcs.get_server_info(serv);
    if (info[1][0] == 0) {
        print("Server doesn't have any RAM. Skipping this server.");
        break;
    }
    var root = info[2];
    var aRAM = info[1][0] - info[1][1];
    var threads = aRAM / sRAM;
    await funcs.open_ports(serv, root);
    await scp(scripts, serv);
    print("Scripts copied over.");
    exec(script_to_run, serv, Math.floor(threads), target);
    print("Script executed.");
}
print("Upgrade Complete.");
